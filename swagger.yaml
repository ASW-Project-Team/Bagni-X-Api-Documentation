openapi: 3.0.1
info:
  title: Bagni X Booking System API
  description: >
    API documentation for the 2020 ASW project of [Riccardo Maldini](https://github.com/maldins46),
    [Francesco Gorini](https://github.com/francescogorini) and [Thomas Angelini](https://github.com/ThomasAngeliniUnibo).
  version: "1.0"

servers:
  - url: http://localhost:3000

tags:
  - name: Customers
    description: >
      Endpoints used to retrieve data about customers of the bathhouse.
  - name: Authentication
    description: Endpoints used for authentication purposes.
  - name: News
    description: Endpoints used to retrieve news about the bathhouse.
  - name: Home
    description: Endpoint to access data of the main home screen.
  - name: Bookings
    description: Enpoints used to access and modify booking information.
  - name: Catalog
    description: Endpoint used to access and modify information about offered services.

components:
  securitySchemes:
    specificCustomerAuth:
      description: The endpoint can be accessed only by the one proprietaty customer.
      type: http
      scheme: bearer
      bearerFormat: JWT

    customerAuth:
      description: The endpoint can be accessed by all the authenticated customers.
      type: http
      scheme: bearer
      bearerFormat: JWT

    adminAuth:
      description: The endpoint can be accessed by all the authenticated admins.
      type: http
      scheme: bearer
      bearerFormat: JWT

    rootAuth:
      description: The endpoint can be accessed only by the one root admin.
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Customer:
      type: object
      properties:
        id:
          type: string
          example: "014384828"
        email:
          type: string
          example: "riccardo.maldini@gmail.com"
        name:
          type: string
          example: "Riccardo"
        surname:
          type: string
          example: "Maldini"
        phone:
          type: string
          example: "3317767246"
        address:
          type: string
          example: "Viale della Vittoria, 40"
        registered:
          type: boolean
          example: true
        deleted:
          type: boolean
          example: false

    CustomerWithPassword:
      type: object
      properties:
        id:
          type: string
          example: "014384828"
        email:
          type: string
          example: "riccardo.maldini@gmail.com"
        password:
          type: string
          example: "mySecretPassword18!"
        name:
          type: string
          example: "Riccardo"
        surname:
          type: string
          example: "Maldini"
        phone:
          type: string
          example: "3317767246"
        address:
          type: string
          example: "Viale della Vittoria, 40"
        registered:
          type: boolean
          example: true
        deleted:
          type: boolean
          example: false

    News:
      type: object
      properties:
        id:
          type: string
          example: "458124"
        image-url:
          type: string
          example: "http://localhost:3000/image.jpg"
        date:
          type: string
          example: "2014-01-01T23:28:56.782Z"
        title:
          type: string
          example: "Apre la nuova stagione estiva di Bagni X!"
        article:
          type: string
          example: "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt."

    ShortNews:
      properties:
        id:
          type: string
          example: "458124"
        image-url:
          type: string
          example: "http://localhost:3000/image.jpg"
        date:
          type: string
          example: "2014-01-01T23:28:56.782Z"
        title:
          type: string
          example: "Apre la nuova stagione estiva di Bagni X!"
        short-article:
          description: "The article, truncated at 120 characters."
          type: string
          example: "Lorem ipsum dolor sit amet, consectetur adipiscing..."

  requestBodies:
    CustomerBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerWithPassword'


paths:
  /api/customers/{customer-id}:
    get:
      summary: It returns user data associated to the given user id.
      tags:
        - Customers
      security:
        - specificCustomerAuth: []
        - adminAuth: []
      parameters:
        - name: customer-id
          in: path
          description: User identificator
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: A JSON object describing the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        400:
          description: The request is malformed.
        401:
          description: Wrong credentials, or customer that is not the interested one, neither an admin.
        404:
          description: The user with the given id does not exist, or it has been logically deleted.

    put:
      summary: Request of modification for some fields of the given user.
      tags:
        - Customers
      description: >
        The modification request with the PUT can be executed by the interested user. Logical deletion of
        the user can be executed using the DELETE primitive.
      security:
        - specificCustomerAuth: []
      parameters:
        - name: customer-id
          in: path
          description: User identificator
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/CustomerBody'
      responses:
        200:
          description: The modification has been accepted by the server.
        400:
          description: The request is malformed.
        401:
          description: Wrong credentials, or customer is not the interested one.
        404:
          description: The user with the given id does not exist, or it has been logically deleted.

    delete:
      summary: It triggers the logic deletion of a user.
      tags:
        - Customers
      security:
        - specificCustomerAuth: []
        - adminAuth: []
      parameters:
        - name: customer-id
          in: path
          description: User identificator
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: The customer has been correctly deleted.
        400:
          description: The request is malformed.
        401:
          description: Wrong credentials, or customer that is not the interested one, neither an admin.

  /api/customers:
    post:
      summary: Used by admins to create fresh unregistered customers.
      description: >
        This endpoint can only be used by admins, to add to the database data about customers that do not use
        the app to book a place. For example, customers that arrive without a booking. In this endpoint, the
        "registered" field must be set to false, or omitted.
        a place.
      tags:
        - Customers
      security:
        - adminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/CustomerBody'
      responses:
        201:
          description: The user has been correctly created.
        400:
          description: The request is malformed.

    get:
      summary: It returns all active customers, in a paginated fashion.
      tags:
        - Customers
      security:
        - adminAuth: []
      parameters:
        - name: page-id
          in: query
          description: >
            It indicates which one of the incremental paginated results will be delivered. If omitted, default is 0.
          schema:
            type: integer
          required: false
        - name: page-size
          in: query
          description: >
            It indicates the maximum size of the results. If omitted, default is 10.
          schema:
            type: integer
          required: false
      responses:
        200:
          description: The user array has been correctly delivered.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        400:
          description: The request is malformed.
        401:
          description: The admin was not correctly authenticated.

  /api/auth/customers/register:
    post:
      summary: Allows a customer to be registered inside the app.
      tags:
        - Authentication
      requestBody:
        $ref: '#/components/requestBodies/CustomerBody'
      responses:
        200:
          description: The customer has been correctly authenticated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "0123938"
                  email:
                    type: string
                    example: "riccardo.maldini@gmail.com"
                  name:
                    type: string
                    example: "Riccardo"
                  surname:
                    type: string
                    example: "Maldini"
                  jwt:
                    type: string
                    example: "asd√≤kdasjfhdf87fafbhe897aa8dbaB"
        400:
          description: The request is malformed, or the customer is present yet.


  /api/auth/customers/login:
    put:
      summary: Allows a customer to be authenticated inside the app.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "riccardo.maldini@gmail.com"
                password:
                  type: string
                  example: "mySuperSecretPassword18!"
      responses:
        200:
          description: The customer has been correctly authenticated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "0123938"
                  email:
                    type: string
                    example: "riccardo.maldini@gmail.com"
                  name:
                    type: string
                    example: "Riccardo"
                  surname:
                    type: string
                    example: "Maldini"
                  jwt:
                    type: string
                    example: "asd√≤kdasjfhdf87fafbhe897aa8dbaB"
        400:
          description: The request is malformed.
        401:
          description: The email-password combination is not correct.

  /api/auth/admin/register:
    post:
      summary: Allows an admin to be registered inside the app.
      description: An admin can only be created by the root user.
      tags:
        - Authentication
      security:
        - rootAuth: []

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "maldins46"
                password:
                  type: string
                  example: "mySuperSecretPassword18!"
      responses:
        200:
          description: The customer has been correctly authenticated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "0123938"
                  username:
                    type: string
                    example: "maldins46"
                  jwt:
                    type: string
                    example: "asd√≤kdasjfhdf87fafbhe897aa8dbaB"
        400:
          description: The request is malformed, or the user is present yet.
        401:
          description: The client is not root, or email-password combination of the root is wrong.

  /api/auth/admin/login:
    put:
      summary: Allows an admin to be authenticated inside the app.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "maldins46"
                password:
                  type: string
                  example: "mySuperSecretPassword18!"
      responses:
        200:
          description: The admin has been correctly authenticated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "0123938"
                  username:
                    type: string
                    example: "maldins46"
                  jwt:
                    type: string
                    example: "asd√≤kdasjfhdf87fafbhe897aa8dbaB"
        400:
          description: The request is malformed.
        401:
          description: The email-password combination is not correct.


  /api/news:
    get:
      summary: Returns the most recent news, in a paginated fashion.
      tags:
        - News
      parameters:
        - name: page-id
          in: query
          description: >
            Which one of the incremental paginated results will be delivered. If omitted, default is 0.
          schema:
            type: integer
          required: false
        - name: page-size
          in: query
          description: >
            Maximum size of the results. If omitted, default is 10.
          schema:
            type: integer
          required: false
      responses:
        200:
          description: The news array has been correctly delivered.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShortNews'
        400:
          description: The request was malformed.
    post:
      summary: Creates a fresh news.
      description: The "id" field, if present, will be ignored, and assigned a new one to the news.
      tags:
        - News
      security:
        - adminAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/News'
      responses:
        201:
          description: The news has been correctly added.
        401:
          description: Wrong credentials, or the user is not an admin.
        400:
          description: The request was malformed.

  /api/news/{news-id}:
    get:
      summary: Returns the specified news.
      tags:
        - News
      parameters:
        - name: news-id
          in: path
          description: It identifies the news.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: The news has been correctly delivered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/News'
        400:
          description: The request was malformed.
        404:
          description: The news with the given id does not exist.

    put:
      summary: Modifies the specified news.
      tags:
        - News
      security:
        - adminAuth: []
      parameters:
        - name: news-id
          in: path
          description: It identifies the news.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/News'
      responses:
        200:
          description: The modification has been accepted by the server.
        400:
          description: The request is malformed.
        401:
          description: Wrong credentials, or the user is not an admin.
        404:
          description: The news with the given id does not exist.

    delete:
      summary: Deletes the specified news.
      tags:
        - News
      security:
        - adminAuth: []
      parameters:
        - name: news-id
          in: path
          description: It identifies the news.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: The deletion has been accepted by the server.
        400:
          description: The request is malformed.
        401:
          description: Wrong credentials, or the user is not an admin.
        404:
          description: The news with the given id does not exist.

  /api/bookings/:
    get:
      summary: It returns some bookings, related optionally to a user. If page size is not specified, the first 10 are returned.
      description: Bookings
      tags:
        - Booking
      parameters:
        - name: user_id
          in: query
          description: User identificator. If the parameter is present, bookings from the specified user are returned.
          required: false
          explode: false
          schema:
            type: string

        - name: page_id
          in: query
          description: Page identificator. If speficied, only bookings relative to the page are returned.
          required: false
          style: form
          explode: true
          schema:
            type: integer

        - name: page_size
          in: query
          description: It specifies that the returned booking are only of the number given.
          required: false
          style: form
          explode: true
          schema:
            type: integer

      responses:
        "200":
          description: OK
        "400":
          description: FAIL
        "403":
          description: Unauthorized

  /api/bookings/{booking-id}/:
    get:
      summary: It returns the booking with id booking_id
      description: Booking
      tags:
        - Bookings
      parameters:
        - name: booking-id
          in: path
          description: Booking identificator
          required: true
          style: simple
          explode: false
          schema:
            type: string

      responses:
        "200":
          description: OK
        "400":
          description: FAIL
        "403":
          description: Unauthorized
    put:
      summary: It allows the user to modify the booking
      description: Booking
      tags:
        - Bookings
      parameters:
        - name: booking-id
          in: path
          description: Booking identificator
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
        "400":
          description: FAIL
        "403":
          description: Unauthorized
    delete:
      summary: It deletes a reservation
      description: Modifica-aggiunta prenotazione
      tags:
        - Bookings
      parameters:
        - name: booking-id
          in: path
          description: Booking identificator
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: OK
        "400":
          description: FAIL
        "403":
          description: Unauthorized

  /api/new-booking/availability/:
    get:
      summary: It returns all the available places in the period, also available selectable services, rank linked to every umbrella
      description: New booking
      tags:
        - Bookings
      parameters:
        - name: from
          in: query
          description: Start booking date
          required: true
          style: form
          explode: true
          schema:
            type: string

        - name: to
          in: query
          description: End booking date
          required: true
          style: form
          explode: true
          schema:
            type: string

      responses:
        "200":
          description: OK
        "400":
          description: FAIL
        "403":
          description: Unauthorized

  /api/new-booking/checkout/:
    post:
      summary: All fields of a booking, i.e. umbrella id, services, price, ecc.
      description: It allows the user to book a site
      tags:
        - Bookings
      responses:
        "200":
          description: OK, all fields of the confirmed booking, included the id
        "400":
          description: FAIL
        "403":
          description: Unauthorized

  /api/home/:
    get:
      summary: The main home card, an array of home cards, an array of services, and an array of rank umbrellas.
      description: Used in the home screen
      tags:
        - Home
      responses:
        "200":
          description: OK, all fields of the confirmed booking, included the id
        "400":
          description: FAIL
        "403":
          description: Unauthorized

  /api/catalog/ranks/:
    post:
      summary: The rank of the umbrella
      description: It allows to insert a new rank
      responses:
        "200":
          description: OK, all fields of the confirmed booking, included the id
        "400":
          description: FAIL
        "403":
          description: Unauthorized

  /api/catalog/ranks/{rank-id}/:
    put:
      summary: The rank of the umbrella
      description: It allows to modify a rank
      responses:
        "200":
          description: OK, all fields of the confirmed booking, included the id
        "400":
          description: FAIL
        "403":
          description: Unauthorized
      parameters:
        - name: rank-id
          in: path
          description: The id of the rank
          required: true
          explode: true
          schema:
            type: string

    get:
      summary: The rank of the umbrella
      description: It return a specified rank
      responses:
        "200":
          description: OK, all fields of the confirmed booking, included the id
        "400":
          description: FAIL
        "403":
          description: Unauthorized
    parameters:
      - name: rank-id
        in: path
        description: The id of the rank
        required: true
        explode: true
        schema:
          type: string

  #/catalog/sales/:
  #  get:
  #    parameters:
  #      - name: rank_id
  #        in: query
  #        description: Rank to refer for the sale
  #        required: false
  #        style: form
  #        explode: true
  #        schema:
  #          type: string

  #      - name: page_id
  #        in: query
  #        description: Page identificator. If speficied, only sales relative to the page are returned.
  #        required: false
  #        style: form
  #        explode: true
  #        schema:
  #          type: integer

  #      - name: page_size
  #        in: query
  #        description: It specifies that the returned salews are only of the number given.
  #        required: false
  #        style: form
  #        explode: true
  #        schema:
  #           type: integer
  #  post:

  #  /catalog/sales/:id:
  #    get:
  #      parameters:
  #        - name: sale_id
  #          in: path
  #          description: Id to refer for the sale
  #          required: false
  #          style: form
  #          explode: true
  #          schema:
  #            type: string
  #    put:
  #      parameters:
  #        - name: sale_id
  #          in: path
  #          description: Id to refer for the sale
  #          required: false
  #          style: form
  #          explode: true
  #          schema:
  #            type: string

  /api/catalog/services/:
    get:
      summary: The services are some options that a user can insert in a new booking
      description: It returns all the services availables
      parameters:
        - name: page_id
          in: query
          description: Page identificator. If speficied, only services relative to the page are returned.
          required: false
          style: form
          explode: true
          schema:
            type: integer
        - name: page_size
          in: query
          description: It specifies that the returned salews are only of the number given.
          required: false
          style: form
          explode: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
        "400":
          description: FAIL
        "403":
          description: Unauthorized
    post:
      summary: The services are some options that a user can insert in a new booking
      description: It allows the admin to insert a new service
      responses:
        "200":
          description: OK
        "400":
          description: FAIL
        "403":
          description: Unauthorized

  /api/catalog/services/{service-id}/:
    get:
      summary: The services are some options that a user can insert in a new booking
      description: It returns a specified service
      parameters:
        - name: service-id
          in: path
          description: Service id
          required: true
          explode: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
        "400":
          description: FAIL
        "403":
          description: Unauthorized
    put:
      summary: The services are some options that a user can insert in a new booking
      description: It allows the admin to modify a service
      parameters:
        - name: service-id
          in: path
          description: Service id
          required: true
          explode: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
        "400":
          description: FAIL
        "403":
          description: Unauthorized
  #   /stats/:
  #    description: robe
