openapi: 3.0.1
info:
  title: Bagni X API documentation
  description: >
    API documentation for the 2020 ASW project of [Riccardo Maldini](https://github.com/maldins46),
    [Francesco Gorini](https://github.com/francescogorini) and [Thomas Angelini](https://github.com/ThomasAngeliniUnibo).
  version: "1.0"

servers:
  - url: http://localhost:3000

tags:
  - name: Customers
    description: >
      Endpoints used to retrieve data about customers of the bathhouse.
  - name: Authentication
    description: Endpoints used for authentication purposes.
  - name: News
    description: Endpoints used to retrieve news about the bathhouse.
  - name: Home
    description: Endpoint to access data of the main home screen.
  - name: Bookings
    description: Enpoints used to access and modify booking information.
  - name: Catalog
    description: Endpoint used to access and modify information about offered services.

components:
  securitySchemes:
    specificCustomerAuth:
      description: The endpoint can be accessed only by the one proprietaty customer.
      type: http
      scheme: bearer
      bearerFormat: JWT

    customerAuth:
      description: The endpoint can be accessed by all the authenticated customers.
      type: http
      scheme: bearer
      bearerFormat: JWT

    adminAuth:
      description: The endpoint can be accessed by all the authenticated admins.
      type: http
      scheme: bearer
      bearerFormat: JWT

    rootAuth:
      description: The endpoint can be accessed only by the one root admin.
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Customer:
      type: object
      properties:
        id:
          type: string
          example: "014384828"
        email:
          type: string
          example: "riccardo.maldini@gmail.com"
        name:
          type: string
          example: "Riccardo"
        surname:
          type: string
          example: "Maldini"
        phone:
          type: string
          example: "3317767246"
        address:
          type: string
          example: "Viale della Vittoria, 40"
        registered:
          type: boolean
          example: true
        deleted:
          type: boolean
          example: false

    CustomerWithPassword:
      type: object
      properties:
        id:
          type: string
          example: "014384828"
        email:
          type: string
          example: "riccardo.maldini@gmail.com"
        password:
          type: string
          example: "mySecretPassword18!"
        name:
          type: string
          example: "Riccardo"
        surname:
          type: string
          example: "Maldini"
        phone:
          type: string
          example: "3317767246"
        address:
          type: string
          example: "Viale della Vittoria, 40"
        registered:
          type: boolean
          example: true
        deleted:
          type: boolean
          example: false

    News:
      type: object
      properties:
        id:
          type: string
          example: "458124"
        imageUrl:
          type: string
          example: "http://localhost:3000/image.jpg"
        date:
          type: string
          example: "2014-01-01T23:28:56.782Z"
        title:
          type: string
          example: "Apre la nuova stagione estiva di Bagni X!"
        article:
          type: string
          example: "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt."

    ShortNews:
      type: object
      properties:
        id:
          type: string
          example: "458124"
        imageUrl:
          type: string
          example: "http://localhost:3000/image.jpg"
        date:
          type: string
          example: "2014-01-01T23:28:56.782Z"
        title:
          type: string
          example: "Apre la nuova stagione estiva di Bagni X!"
        short-article:
          description: "The article, truncated at 120 characters."
          type: string
          example: "Lorem ipsum dolor sit amet, consectetur adipiscing..."

    Sale:
      type: object
      properties:
        id:
          type: string
          example: "234089"
        percent:
          type: number
          example: 20
        dateFrom:
          type: string
          example: "2014-01-01T23:28:56.782Z"
        dateTo:
          type: string
          example: "2014-01-01T23:28:56.782Z"

    RankUmbrella:
      type: object
      properties:
        name:
          type: string
          example: "Prima fila"
        description:
          type: string
          example: "I migliori ombrelloni."
        image:
          type: string
          example: "http://localhost:3000/image.jpg"
        price:
          type: number
          example: 12.23
        fromUmbrella:
          type: integer
          example: 1
        toUmbrella:
          type: integer
          example: 20
        sales:
          type: array
          items:
            $ref: '#/components/schemas/Sale'

    Umbrella:
      type: object
      properties:
        id:
          type: string
          example: "0986"
        number:
          type: integer
          example: 12
        rank:
          $ref: '#/components/schemas/RankUmbrella'

    Service:
      type: object
      properties:
        id:
          type: string
          example: "4554"
        name:
          type: string
          example: "Cabina"
        description:
          type: string
          example: "Aggiungi una cabina alla tua prenotazione per porre le tue cose in sicurezza."
        price:
          type: number
          example: 12.23
        imageUrl:
          type: string
          example: "http://localhost:3000/image.jpg"
        umbrellaRelated:
          type: boolean
          example: true

    Booking:
      type: object
      properties:
        id:
          type: string
          example: "4620"
        userId:
          type: string
          example: "4726"
        confirmed:
          description: refers to the confirmation of the booking from an admin.
          type: boolean
          example: true
        cancelled:
          description: Refers to the logical deletion of a booking.
          type: boolean
          example: true
        price:
          type: number
          example: 140.34
        dateFrom:
          type: string
          example: "2014-01-01T23:28:56.782Z"
        dateTo:
          type: string
          example: "2014-01-01T23:28:56.782Z"
        umbrellas:
          type: array
          items:
            $ref: '#/components/schemas/Umbrella'
        services:
          type: array
          items:
            $ref: '#/components/schemas/Service'


  requestBodies:
    CustomerBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CustomerWithPassword'


paths:
  /api/customers/{customer-id}:
    get:
      summary: It returns user data associated to the given user id.
      tags:
        - Customers
      security:
        - specificCustomerAuth: []
        - adminAuth: []
      parameters:
        - name: customer-id
          in: path
          description: User identificator
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: A JSON object describing the user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        400:
          description: The request is malformed.
        401:
          description: Wrong credentials, or customer that is not the interested one, neither an admin.
        404:
          description: The user with the given id does not exist, or it has been logically deleted.

    put:
      summary: Request of modification for some fields of the given user.
      tags:
        - Customers
      description: >
        The modification request with the PUT can be executed by the interested user. Logical deletion of
        the user can be executed using the DELETE primitive.
      security:
        - specificCustomerAuth: []
      parameters:
        - name: customer-id
          in: path
          description: User identificator
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/CustomerBody'
      responses:
        200:
          description: The modification has been accepted by the server.
        400:
          description: The request is malformed.
        401:
          description: Wrong credentials, or customer is not the interested one.
        404:
          description: The user with the given id does not exist, or it has been logically deleted.

    delete:
      summary: It triggers the logic deletion of a user.
      tags:
        - Customers
      security:
        - specificCustomerAuth: []
        - adminAuth: []
      parameters:
        - name: customer-id
          in: path
          description: User identificator
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: The customer has been correctly deleted.
        400:
          description: The request is malformed.
        401:
          description: Wrong credentials, or customer that is not the interested one, neither an admin.

  /api/customers:
    post:
      summary: Used by admins to create fresh unregistered customers.
      description: >
        This endpoint can only be used by admins, to add to the database data about customers that do not use
        the app to book a place. For example, customers that arrive without a booking. In this endpoint, the
        "registered" field must be set to false, or omitted.
        a place.
      tags:
        - Customers
      security:
        - adminAuth: []
      requestBody:
        $ref: '#/components/requestBodies/CustomerBody'
      responses:
        201:
          description: The user has been correctly created.
        400:
          description: The request is malformed.

    get:
      summary: It returns all active customers, in a paginated fashion.
      tags:
        - Customers
      security:
        - adminAuth: []
      parameters:
        - name: page-id
          in: query
          description: >
            It indicates which one of the incremental paginated results will be delivered. If omitted, default is 0.
          schema:
            type: integer
          required: false
        - name: page-size
          in: query
          description: >
            It indicates the maximum size of the results. If omitted, default is 10.
          schema:
            type: integer
          required: false
      responses:
        200:
          description: The user array has been correctly delivered.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        400:
          description: The request is malformed.
        401:
          description: The admin was not correctly authenticated.

  /api/auth/customers/register:
    post:
      summary: Allows a customer to be registered inside the app.
      tags:
        - Authentication
      requestBody:
        $ref: '#/components/requestBodies/CustomerBody'
      responses:
        201:
          description: The customer has been correctly authenticated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "0123938"
                  email:
                    type: string
                    example: "riccardo.maldini@gmail.com"
                  name:
                    type: string
                    example: "Riccardo"
                  surname:
                    type: string
                    example: "Maldini"
                  jwt:
                    type: string
                    example: "asdòkdasjfhdf87fafbhe897aa8dbaB"
        400:
          description: The request is malformed, or the customer is present yet.

  /api/auth/customers/login:
    post:
      summary: Allows a customer to be authenticated inside the app.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "riccardo.maldini@gmail.com"
                password:
                  type: string
                  example: "mySuperSecretPassword18!"
      responses:
        200:
          description: The customer has been correctly authenticated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "0123938"
                  email:
                    type: string
                    example: "riccardo.maldini@gmail.com"
                  name:
                    type: string
                    example: "Riccardo"
                  surname:
                    type: string
                    example: "Maldini"
                  jwt:
                    type: string
                    example: "asdòkdasjfhdf87fafbhe897aa8dbaB"
        400:
          description: The request is malformed.
        401:
          description: The email-password combination is not correct.

  /api/auth/admin/register:
    post:
      summary: Allows an admin to be registered inside the app.
      description: An admin can only be created by the root user.
      tags:
        - Authentication
      security:
        - rootAuth: []

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "maldins46"
                password:
                  type: string
                  example: "mySuperSecretPassword18!"
      responses:
        201:
          description: The customer has been correctly authenticated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "0123938"
                  username:
                    type: string
                    example: "maldins46"
                  jwt:
                    type: string
                    example: "asdòkdasjfhdf87fafbhe897aa8dbaB"
        400:
          description: The request is malformed, or the user is present yet.
        401:
          description: The client is not root, or email-password combination of the root is wrong.

  /api/auth/admin/login:
    post:
      summary: Allows an admin to be authenticated inside the app.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "maldins46"
                password:
                  type: string
                  example: "mySuperSecretPassword18!"
      responses:
        200:
          description: The admin has been correctly authenticated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "0123938"
                  username:
                    type: string
                    example: "maldins46"
                  jwt:
                    type: string
                    example: "asdòkdasjfhdf87fafbhe897aa8dbaB"
        400:
          description: The request is malformed.
        401:
          description: The email-password combination is not correct.

  /api/news:
    get:
      summary: Returns the most recent news, in a paginated fashion.
      tags:
        - News
      parameters:
        - name: page-id
          in: query
          description: >
            Which one of the incremental paginated results will be delivered. If omitted, default is 0.
          schema:
            type: integer
          required: false
        - name: page-size
          in: query
          description: >
            Maximum size of the results. If omitted, default is 10.
          schema:
            type: integer
          required: false
      responses:
        200:
          description: The news array has been correctly delivered.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShortNews'
        400:
          description: The request was malformed.

    post:
      summary: Creates a fresh news.
      description: The "id" field, if present, will be ignored, and assigned a new one to the news.
      tags:
        - News
      security:
        - adminAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/News'
      responses:
        201:
          description: The news has been correctly added.
        401:
          description: Wrong credentials, or the user is not an admin.
        400:
          description: The request was malformed.

  /api/news/{news-id}:
    get:
      summary: Returns the specified news.
      tags:
        - News
      parameters:
        - name: news-id
          in: path
          description: It identifies the news.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: The news has been correctly delivered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/News'
        400:
          description: The request was malformed.
        404:
          description: The news with the given id does not exist.

    put:
      summary: Modifies the specified news.
      tags:
        - News
      security:
        - adminAuth: []
      parameters:
        - name: news-id
          in: path
          description: It identifies the news.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/News'
      responses:
        200:
          description: The modification has been accepted by the server.
        400:
          description: The request is malformed.
        401:
          description: Wrong credentials, or the user is not an admin.
        404:
          description: The news with the given id does not exist.

    delete:
      summary: Deletes the specified news.
      tags:
        - News
      security:
        - adminAuth: []
      parameters:
        - name: news-id
          in: path
          description: It identifies the news.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: The deletion has been accepted by the server.
        400:
          description: The request is malformed.
        401:
          description: Wrong credentials, or the user is not an admin.
        404:
          description: The news with the given id does not exist.

  /api/bookings:
    get:
      summary: It returns all the bookings, in a paginated fashion, in inverse chronological order.
      tags:
        - Bookings
      security:
        - adminAuth: []
      parameters:
        - name: page-id
          in: query
          description: >
            It indicates which one of the incremental paginated results will be delivered. If omitted, default is 0.
          schema:
            type: integer
          required: false
        - name: page-size
          in: query
          description: >
            It indicates the maximum size of the results. If omitted, default is 10.
          schema:
            type: integer
          required: false

      responses:
        200:
          description: The booking array has been correctly delivered.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Booking'
        400:
          description: The request is malformed.
        401:
          description: The admin was not correctly authenticated.


  /api/bookings/customer/{customer-id}:
    get:
      summary: It returns all the bookings of a specified customer, in a paginated fashion, in inverse chronological order.
      description: A different endpoint is necessary to handle authorization constraints more easily.
      tags:
        - Bookings
      security:
        - adminAuth: []
        - specificCustomerAuth: []
      parameters:
        - name: customer-id
          in: path
          description: It indicates the id of the customer.
          schema:
            type: integer
          required: true
        - name: page-id
          in: query
          description: >
            It indicates which one of the incremental paginated results will be delivered. If omitted, default is 0.
          schema:
            type: integer
          required: false
        - name: page-size
          in: query
          description: >
            It indicates the maximum size of the results. If omitted, default is 10.
          schema:
            type: integer
          required: false

      responses:
        200:
          description: The booking array has been correctly delivered.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Booking'
        400:
          description: The request is malformed.
        401:
          description: The user was not correctly authenticated, or the authenticated customer is not the interested one.
        404:
          description: The user is not present in the database.

  /api/bookings/{booking-id}:
    get:
      summary: It returns the booking with the specified id.
      tags:
        - Bookings
      security:
        - adminAuth: []
        - specificUserAuth: []
      parameters:
        - name: booking-id
          in: path
          description: It identifies the booking.
          required: true
          style: simple
          explode: false
          schema:
            type: string

      responses:
        200:
          description: The booking has been correctly delivered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'

        400:
          description: The request is malformed.
        401:
          description: >
            The email-password combination is wrong, the admin was not correctly authenticated, or the customer is not the interested one.
        404:
          description: Booking not found. It should be always returned, also if logically deleted.
    put:
      summary: It allows the the admin to modify a booking.
      description: >
        The booking modification can only be completed by an admin. Once created a booking, a customer cannot modify it,
        and can only delete it at least 2 days before the booking, using the DELETE primitive. Unlike that primitive,
        the PUT can be used by the admin also to delete the booking (by setting the cancelled flag to true), in the last
        two days before the booking.
      tags:
        - Bookings
      security:
        - adminAuth: []
      parameters:
        - name: booking-id
          in: path
          description: It univocally identifies the booking.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: The booking has been correctly modified.
        400:
          description: The request is malformed.
        401:
          description: The admin was not correctly authenticated.
        404:
          description: Booking not found.

    delete:
      summary: It deletes a reservation, at least two days before the booking
      tags:
        - Bookings
      security:
        - specifiedUserAuth: []
        - adminAuth: []
      parameters:
        - name: booking-id
          in: path
          description: It univocally identifies the booking.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: The booking has been correctly deleted.
        400:
          description: The request is malformed.
        401:
          description: The specified customer, or the admin, is not correctly authenticated.
        404:
          description: Booking not found.

  /api/new-booking/availability:
    get:
      summary: It returns all available umbrellas in the specified period.
      description: >
        This endpoint is part of the flow used to create a new booking. As such, it is accessible only by
        customers and admins.
      security:
        - adminAuth: []
        - customerAuth: []
      tags:
        - Bookings
      parameters:
        - name: date-from
          in: query
          description: The date from which search available umbrellas.
          required: true
          style: form
          explode: true
          schema:
            type: string

        - name: date-to
          in: query
          description: The date to which search available umbrellas.
          required: true
          style: form
          explode: true
          schema:
            type: string

      responses:
        200:
          description: The query was correctly served.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "Prima fila"
                    description:
                      type: string
                      example: "I migliori ombrelloni."
                    image:
                      type: string
                      example: "http://localhost:3000/image.jpg"
                    price:
                      type: number
                      example: 12.23
                    fromUmbrella:
                      type: integer
                      example: 1
                    toUmbrella:
                      type: integer
                      example: 20
                    sales:
                      type: array
                      items:
                        $ref: '#/components/schemas/Sale'
                    availableUmbrellas:
                      type: array
                      items:
                        $ref: '#/components/schemas/Umbrella'
        400:
          description: The request is malformed.
        401:
          description: The user was not correctly authenticated.


  /api/new-booking/checkout:
    post:
      summary: It creates a new booking.
      description: >
        This endpoint is part of the flow used to create a new booking. As such, it is accessible only by
        customers and admins.
      security:
        - adminAuth: []
        - customerAuth: []
      tags:
        - Bookings
      responses:
        201:
          description: The booking was successful inserted into the database.
        400:
          description: The request is malformed.
        401:
          description: The user was not correctly authenticated.

  /api/home:
    get:
      summary: The main home card, an array of home cards, an array of services, and an array of rank umbrellas.
      description: Used in the home screen
      tags:
        - Home
      responses:
        "200":
          description: OK, all fields of the confirmed booking, included the id
        "400":
          description: FAIL
        "403":
          description: Unauthorized

  /api/catalog/ranks/:
    post:
      summary: The rank of the umbrella
      description: It allows to insert a new rank
      responses:
        "200":
          description: OK, all fields of the confirmed booking, included the id
        "400":
          description: FAIL
        "403":
          description: Unauthorized

  /api/catalog/ranks/{rank-id}/:
    put:
      summary: The rank of the umbrella
      description: It allows to modify a rank
      responses:
        "200":
          description: OK, all fields of the confirmed booking, included the id
        "400":
          description: FAIL
        "403":
          description: Unauthorized
      parameters:
        - name: rank-id
          in: path
          description: The id of the rank
          required: true
          explode: true
          schema:
            type: string

    get:
      summary: The rank of the umbrella
      description: It return a specified rank
      responses:
        "200":
          description: OK, all fields of the confirmed booking, included the id
        "400":
          description: FAIL
        "403":
          description: Unauthorized
    parameters:
      - name: rank-id
        in: path
        description: The id of the rank
        required: true
        explode: true
        schema:
          type: string

  #/catalog/sales/:
  #  get:
  #    parameters:
  #      - name: rank_id
  #        in: query
  #        description: Rank to refer for the sale
  #        required: false
  #        style: form
  #        explode: true
  #        schema:
  #          type: string

  #      - name: page_id
  #        in: query
  #        description: Page identificator. If speficied, only sales relative to the page are returned.
  #        required: false
  #        style: form
  #        explode: true
  #        schema:
  #          type: integer

  #      - name: page_size
  #        in: query
  #        description: It specifies that the returned salews are only of the number given.
  #        required: false
  #        style: form
  #        explode: true
  #        schema:
  #           type: integer
  #  post:

  #  /catalog/sales/:id:
  #    get:
  #      parameters:
  #        - name: sale_id
  #          in: path
  #          description: Id to refer for the sale
  #          required: false
  #          style: form
  #          explode: true
  #          schema:
  #            type: string
  #    put:
  #      parameters:
  #        - name: sale_id
  #          in: path
  #          description: Id to refer for the sale
  #          required: false
  #          style: form
  #          explode: true
  #          schema:
  #            type: string

  /api/catalog/services/:
    get:
      summary: The services are some options that a user can insert in a new booking
      description: It returns all the services availables
      parameters:
        - name: page_id
          in: query
          description: Page identificator. If speficied, only services relative to the page are returned.
          required: false
          style: form
          explode: true
          schema:
            type: integer
        - name: page_size
          in: query
          description: It specifies that the returned salews are only of the number given.
          required: false
          style: form
          explode: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
        "400":
          description: FAIL
        "403":
          description: Unauthorized
    post:
      summary: The services are some options that a user can insert in a new booking
      description: It allows the admin to insert a new service
      responses:
        "200":
          description: OK
        "400":
          description: FAIL
        "403":
          description: Unauthorized

  /api/catalog/services/{service-id}/:
    get:
      summary: The services are some options that a user can insert in a new booking
      description: It returns a specified service
      parameters:
        - name: service-id
          in: path
          description: Service id
          required: true
          explode: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
        "400":
          description: FAIL
        "403":
          description: Unauthorized
    put:
      summary: The services are some options that a user can insert in a new booking
      description: It allows the admin to modify a service
      parameters:
        - name: service-id
          in: path
          description: Service id
          required: true
          explode: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
        "400":
          description: FAIL
        "403":
          description: Unauthorized
  #   /stats/:
  #    description: robe
